image: docker:stable
services:
- docker:stable-dind

include:
  - template: Container-Scanning.gitlab-ci.yml

stages:
  - build
  - test
  - release
  - trigger

build:
  stage: build
  script:
    - build

# goss:
#   stage: test
#   variables:
#     GOSS_VER: v0.3.8
#     GOSS_OPTS: "--format junit"
#     GOSS_SLEEP: 5s
#     GOSS_FILES_STRATEGY: cp
#     GOSS_PATH: /usr/local/bin/
#   script:
#     - echo "Logging into Gitlab Registry..."
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
#     - echo "Running Goss on Container..."
#     - apk --update  --no-cache add bash
#     - wget -O /usr/local/bin/goss https://github.com/aelsabbahy/goss/releases/download/${GOSS_VER}/goss-linux-amd64 && chmod +x /usr/local/bin/goss
#     - wget -O /usr/local/bin/dgoss https://github.com/aelsabbahy/goss/releases/download/${GOSS_VER}/dgoss && chmod +x /usr/local/bin/dgoss
#     - dgoss run -e BIND_PORT=":80" -e VCL_CONFIG="/etc/varnish/default.vcl" -e CACHE_SIZE="500m" -e VARNISHD_PARAMS="-p feature=+http2 -p default_ttl=120 -p default_grace=3600 -S /etc/varnish/secret -T 127.0.0.1:6082" $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG > goss.xml

#   artifacts:
#     reports:
#       junit: goss.xml
#   only:
#     - branches

release:
  stage: release
  script:
    - release_container "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"  # push as :latest
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" "strowi/varnish"
    - docker push "strowi/varnish"
  only:
    - master



.devops: &devops |

  # wrapper around container building
  # build
  #   - builds default Dockerfile -> reponame:latest
  # build $1
  #   - builds Dockerfile.$1 -> reponame:$1
  #
  function build() {

    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging in to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo ""
    fi

    if [[ -n "$2" ]]; then
      echo "Building docker image from $2 / Dockerfile.$1 ..."
      docker build --cache-from $CI_REGISTRY_IMAGE/$2:${CI_COMMIT_REF_SLUG}_${1} -t "$CI_REGISTRY_IMAGE/$2:${CI_COMMIT_REF_SLUG}_${1}" -f Dockerfile.$1 $2
      echo "Pushing to GitLab Container Registry..."
      docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG_$1"

    elif [[ -n "$1" ]]; then
      echo "Building docker image from Dockerfile.$1 ..."
      docker build --cache-from $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG}_${1} -t "$CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG}_${1}" -f Dockerfile.$1 .
      echo "Pushing to GitLab Container Registry..."
      docker push "$CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG}_${1}"
    else
      echo "Building docker image from Dockerfile ..."
      docker build --cache-from $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG} -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
      echo "Pushing to GitLab Container Registry..."
      docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    fi
    echo ""
  }

  function release_container() {
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo ""
    fi

    if [[ -n "$DOCKER_TOKEN" ]]; then
      echo "Logging in to Docker Registry with token..."
      docker login -u "strowi" -p "$DOCKER_TOKEN" "docker.io"
      echo ""
    fi

    docker pull "$1"
    docker tag "$1" "$CI_REGISTRY_IMAGE"
    docker push "$CI_REGISTRY_IMAGE"
  }


before_script:
  - *devops
